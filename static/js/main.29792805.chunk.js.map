{"version":3,"sources":["utils/Api.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","App","useState","users","setUsers","allUsers","setAllUsers","useEffect","API","then","data","results","console","log","className","onChange","event","searchValue","target","value","newUsers","filter","user","name","first","toLowerCase","includes","onClick","sortedUsers","sort","a","b","dob","age","map","key","id","last","email","phone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAEe,EACH,WACR,OAAOA,IAAMC,IAAI,kD,MCAN,SAASC,IAAO,IAAD,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEIF,mBAAS,IAFb,mBAErBG,EAFqB,KAEXC,EAFW,KAI5BC,qBAAU,WACRC,IAAeC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACrBN,EAASM,EAAKC,SACdL,EAAYI,EAAKC,cAElB,IA6BH,OAFAC,QAAQC,IAAIV,GAGV,yBAAKW,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mCACb,kDACA,2BAAOC,SAhCA,SAACC,GACd,IAAMC,EAAcD,EAAME,OAAOC,MAE3BC,EAAWf,EAASgB,QAAO,SAACC,GAChC,QAAIA,EAAKC,KAAKC,MAAMC,cAAcC,SAAST,EAAYQ,kBAKzDrB,EAASgB,MAwBH,4BAAQO,QArBH,WACX,IAAMC,EAAczB,EAAM0B,MAAK,SAACC,EAAGC,GACjC,OAAID,EAAEE,IAAIC,IAAMF,EAAEC,IAAIC,KACZ,EAENH,EAAEE,IAAIC,IAAMF,EAAEC,IAAIC,IACb,EAEF,KAET7B,EAAS,YAAIwB,MAWP,iBAEF,yBAAKd,UAAU,aACb,+BACE,+BACE,4BACE,oCACA,qCACA,qCACA,qCAGJ,+BACGX,EAAM+B,KAAI,SAACZ,GAAD,OACT,wBAAIa,IAAKb,EAAKc,GAAGjB,OACf,4BAAKG,EAAKC,KAAKC,OACf,4BAAKF,EAAKC,KAAKc,MACf,4BAAKf,EAAKgB,OACV,4BAAKhB,EAAKiB,OACV,4BAAKjB,EAAKU,IAAIC,cCvDZO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.29792805.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  },\n};\n","import React, { useState, useEffect } from \"react\";\nimport API from \"./utils/Api\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [users, setUsers] = useState([]);\n  const [allUsers, setAllUsers] = useState([]);\n\n  useEffect(() => {\n    API.getUsers().then(({ data }) => {\n      setUsers(data.results);\n      setAllUsers(data.results);\n    });\n  }, []);\n\n  const search = (event) => {\n    const searchValue = event.target.value;\n\n    const newUsers = allUsers.filter((user) => {\n      if (user.name.first.toLowerCase().includes(searchValue.toLowerCase())) {\n        return true;\n      }\n      return false;\n    });\n    setUsers(newUsers);\n  };\n\n  const sort = () => {\n    const sortedUsers = users.sort((a, b) => {\n      if (a.dob.age < b.dob.age) {\n        return -1;\n      }\n      if (a.dob.age > b.dob.age) {\n        return 1;\n      }\n      return 0;\n    });\n    setUsers([...sortedUsers]);\n  };\n\n  console.log(users);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"jumbotron rounded-0 text-center\">\n          <h1>Employee Directory</h1>\n          <input onChange={search} />\n          <button onClick={sort}> Sort by age</button>\n        </div>\n        <div className=\"container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Phone</th>\n                <th>Age</th>\n              </tr>\n            </thead>\n            <tbody>\n              {users.map((user) => (\n                <tr key={user.id.value}>\n                  <th>{user.name.first}</th>\n                  <th>{user.name.last}</th>\n                  <th>{user.email}</th>\n                  <th>{user.phone}</th>\n                  <th>{user.dob.age}</th>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}